<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on mLogger</title>
    <link>https://rxtee.com/posts/</link>
    <description>Recent content in Posts on mLogger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 12 Apr 2020 16:42:50 +0800</lastBuildDate>
    
	<atom:link href="https://rxtee.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>修改 Launchpad 布局</title>
      <link>https://rxtee.com/posts/launchpad_layout/</link>
      <pubDate>Sun, 12 Apr 2020 16:42:50 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/launchpad_layout/</guid>
      <description>Launchpad 作为 macOS 查找和快捷启动应用的界面，可谓是好不方便。然而 Launchpad 默认布局下应用图标尺寸显得有点大，使得一屏显示的应用数量「屈指可数」，这给习惯用 Launchpad 启动应用的用户带来些许不便，无法满足其个性化的需求。虽然在 Launchpad 中无法调整其布局，但是我们还是可以通过终端指令来修改的。
打开终端，输入以下指令：
defaults write com.apple.dock springboard-columns -int 9; # 列数 defaults write com.apple.dock springboard-rows -int 9; # 行数 defaults write com.apple.dock ResetLaunchPad -bool TRUE; # 重置 Launchpad killall Dock # 重置 Dock 执行完毕之后，即可看到 Launchpad 为 9 行 9 列排布，应用图标也相应变小了。不过需要注意的是：由于重置了 Launchpad ，之前创建的文件夹会丢失，需要你重新整理下，不过一次整理幸福一生，也是值得的。</description>
    </item>
    
    <item>
      <title>给你的 Markdown 文档添砖加瓦 ｜ Shortcodes by Hugo</title>
      <link>https://rxtee.com/posts/shortcodes/</link>
      <pubDate>Mon, 06 Apr 2020 16:50:57 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/shortcodes/</guid>
      <description>引言 Markdown 固然简洁优雅，但有时候我们还期望在文档中添加一些更加丰富的内容（视频、&amp;lt;iframe&amp;gt;，等等），就不得不写一些 HTML 在 Markdown 文档里，看起来极其不美观和优雅。那么有没有一种方式既可以像 Markdown 那样优雅又可以让我添加更多丰富内容的方法呢？答案是：有的 —— Shortcodes（我不知道如何翻译，短代码？似乎又比较难听，姑且就不翻译了）。
什么是 Shortcodes  Shortcodes are simple snippets inside your content files calling built-in or custom templates.
 正如 Hugo 文档介绍这般，Shortcodes 是写在文档中的简单代码片段，形如：{{&amp;lt; youtube 4QOkcGwjVow &amp;gt;}} （如果需要在文档内显示 Shortcodes 语句，需要在标签内添加注释将语句包起来即可，{{&amp;lt;/* somecode */&amp;gt;}}）一个简单的标签就可以在你的文档内插入 YouTube 的视频。
  而如果是内嵌 HTML 的方式，你需要写这些 HTML 代码在你的文档里，高下立判。
&amp;lt;iframe width=&amp;#34;560&amp;#34; height=&amp;#34;315&amp;#34; src=&amp;#34;https://www.youtube.com/embed/4QOkcGwjVow&amp;#34; frameborder=&amp;#34;0&amp;#34; allow=&amp;#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&amp;#34; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt; 使用 Shortcodes 详情请参见官方文档，我觉得没有能比官方文档讲述地更清楚的地方了。
需要注意的有一点：{{&amp;lt; somecode &amp;gt;}} 和 {{% somecode %}} 的区别，看了文档你就了然于胸。</description>
    </item>
    
    <item>
      <title>多图救星 —— 「懒加载」 ｜ Hugo</title>
      <link>https://rxtee.com/posts/lazy_load_image/</link>
      <pubDate>Sun, 05 Apr 2020 21:32:26 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/lazy_load_image/</guid>
      <description>引言 总所周知，网页的加载速度主要取决于页面上图片的数量和大小。一张普通的图片往往就达几 M 甚至十几 M，当页面上图片很多的时候，加载完整个页面将是一件非常耗时的事情。况且，在一寸光阴一寸金的今天，时间意味生命，每增加 1s 的加载时间消耗，就会损失很多浏览者。
所以不仅要压缩网页上的图片，还需要在加载上拥有策略 —— 「懒加载」。浏览者不是一眼就可以浏览到网页上的所有图片的，所以当网页加载的时候只先加载浏览者目光所及之处的图片，在浏览者往下浏览的过程中，再加载即将出现在视野内的图片，这样不但可以加快整个网页的加载速度，还可给浏览者一个很好的体验。
lazysizes  lazysizes is a fast (jank-free), SEO-friendly and self-initializing lazyloader for images (including responsive images picture/srcset), iframes, scripts/widgets and much more. It also prioritizes resources by differentiating between crucial in view and near view elements to make perceived performance even faster.
It may become also your number one tool to integrate responsive images. It can automatically calculate the sizes attribute for your responsive images, it allows you to share media queries for your media attributes with your CSS, helping to separate layout (CSS) from content/structure (HTML) and it makes integrating responsive images into any environment really simple.</description>
    </item>
    
    <item>
      <title>ELOH Strategy ｜ 过关秘籍</title>
      <link>https://rxtee.com/posts/eloh_strategy/</link>
      <pubDate>Sun, 05 Apr 2020 13:53:32 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/eloh_strategy/</guid>
      <description> 简介 这是一款关于音乐、解谜、自然与自我的游戏。
咿哟《ELOH》是在Broken Rules和TILT Games合作发行赢得2017年【Apple Design Awards】（苹果设计奖）的《回忆之旅》后，再次合力推出的音乐节拍解谜游戏。它由来自《回忆之旅》的研发团队全新设计，并荣获了2019年【Apple Design Awards】（苹果设计奖）。和《回忆之旅》一样，《ELOH》也是一个画风精致，充满了艺术张力和韵律之美的作品。它将弹射游戏的滑动操作与轻灵自然的节拍音乐巧妙融合，是一款通过声音让人放轻松，在韵律中找到个人最佳状态的音乐节拍解谜游戏。
本质上咿哟《ELOH》是一个解谜游戏，但是巧妙的设计使得音乐不再只是游戏的背景和点缀，而是直接成为了玩法本身的一部分，音乐完全可以由玩家来创造，使得整个游戏的精巧度和耐玩度大幅提升，由此音乐也占据了这个游戏一半的灵魂，整体放松的游戏设计，让人不只专注于谜题本身，而是更享受解谜的过程，让自由的节奏带你进入一个轻松美妙的异域世界。
类型 下载链接 ELOH (App Store) 特色 轻巧灵动的节拍聆听自然的韵律 咿哟《ELOH》烘托的情绪是轻快而愉悦的，时而在非洲丛林穿行，时而宛若站立于瀑布，倾听飞流叩石，玩家在游戏过程中能通过韵律感受到到与自然和谐的相处之道。
112个音乐解谜关卡极易上手毫无压力 流畅的学习曲线以及无压力的玩法设计，直观易懂的触屏操作，随意且轻松，让你在112个音乐解谜关卡里寻找属于自己的放松空间。
独特的节拍精灵创建个性节奏 尝试将节拍精灵移动至正确位置来完成关卡，每种精灵角色够为你带来不一样的独特节拍和音色，创建你自己的个性节奏，一切只为轻灵的游戏体验。
共享式原创音乐精美游戏画面 由SCNTFC和玩家制作的原创且动听的配乐，让人放松下来且沉迷其中。精美的手绘画面和有趣的动画，轻巧灵动，展现原始与精致的奇妙结合。
通关秘籍 1 ~ 12  1     2     3     4     5     6     7     8     9     10     11     12    13 ~ 24  13     14     15     16     17     18     19     20     21     22     23     24    25 ~ 35  25     26     27     28     29     30     31     32     33     34     35    36 ~ 46  36     37     38     39     40     41     42     43     44     45     46    47 ~ 59  47     48     49     50     51     52     53     54     55     56     57     58     59    60 ~ 72  60     61     62     63     64     65     66     67     68     69     70     71     72    73 ~ 98  73     74     75     76     77     78     79     80     81     82     83     84     85     86     87     88     89     90     91     92     93     94     95     96     97     98    Hurrah   Thanks for playing   </description>
    </item>
    
    <item>
      <title>给你的 Mac 快速预览加点儿料</title>
      <link>https://rxtee.com/posts/quicklook_plugins/</link>
      <pubDate>Fri, 03 Apr 2020 10:41:12 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/quicklook_plugins/</guid>
      <description>引言 QuickLook 是什么？ QuickLook 是苹果自 OS X 10.5 版本引入的一项技术。用户可以在不打开文件的情况下，只需要选中文件，单击空格键，即可快速预览文件内容。
QuickLook 扩展性 查询苹果开发者文档关于 QuickLook 介绍部分：
 QuickLook is a technology introduced in OS X version 10.5 that enables client applications, such as Spotlight and the Finder, to display thumbnail images and full-size previews of documents. For documents of common content types—notably HTML, RTF, plain text, TIFF, PNG, JPEG, PDF, DAE, and QuickTime movies—this support is automatic. However, applications with documents that are of less common or even private content types can still take advantage of the QuickLook feature.</description>
    </item>
    
    <item>
      <title>树莓派初始化</title>
      <link>https://rxtee.com/posts/raspberry_pi/</link>
      <pubDate>Thu, 02 Apr 2020 18:05:51 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/raspberry_pi/</guid>
      <description>什么是树莓派？  树莓派（英语：Raspberry Pi）是一款基于 Linux 的单片机电脑，由英国的树莓派基金会所开发，目的是以低价硬体及自由软体促进学校的基本计算机科学教育。
树莓派由两家拥有许可的公司（Element 14/Prmier Farnell 和 RS Components）生产，这两家公司都在网上出售树莓派。
树莓派每一代均使用博通（Broadcom）出产的 ARM 架构处理器，内存在 256MB 和 4GB 之间，主要使用 SD 卡或者 TF 卡作为存储媒躰，配备 USB 接口、HDMI 的视频输出（支持声音输出）和 RCA 端子输出，内置 Ethernet/WLAN/Bluetooth 网络链接的方式（依据型号决定），并且可使用多种操作系统。产品线型号分为 A 型、B 型、Zero 型和 ComputeModule 计算卡。
—— Wikipedia
 产品列表  Raspberry Pi Zero Raspberry Pi Zero W Raspberry Pi 1 Model A&amp;#43; Raspberry Pi 1 Model B&amp;#43; Raspberry Pi 2 Model B Raspberry Pi 3 Model B Raspberry Pi 3 Model B&amp;#43; Raspberry Pi 3 Model A&amp;#43; Raspberry Pi 4 Model B ……  生态 树莓派之所以受到全世界的青睐，就在于它小小的身体蕴含着巨大的能量，同时还有成熟的社区生态。它不仅可以作为欠发达地区或国家学生接触计算机的首选，还可以配合一些定制化的系统或者插件，摇身一变为智能家庭中枢、NAS、魔镜、家庭影院系统等等等等，不胜枚举。</description>
    </item>
    
    <item>
      <title>修改 AirDrop 文件存放位置</title>
      <link>https://rxtee.com/posts/change_airdrop_destination/</link>
      <pubDate>Thu, 26 Mar 2020 19:26:25 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/change_airdrop_destination/</guid>
      <description>背景 「滴滴滴」，你的 Mac 收到了你 AirDrop 的文件，并「贴心」地把它存放在了 Downloads （下载）文件夹下，而你却并不期望它自动存放在下载文件夹目录下，至少我不是的。
 - 下载文件夹目录结构 -
 我喜欢给文件来源分类，譬如上图的样子，这样在很容易知道文件来源。
如何自定义存放路径？ 按照「惯例」 Mac 上的一些配置都是以 plist 文件来管理的，只要找到对应的 plist 文件就可以「魔改」它。然而，让我失望的是：网上冲浪了一圈，并没有发现对应的配置文件😢。如果你知道请告诉我。
那么有没有其他途径呢？
Folder Actions 什么是 Folder Actions  Folder Actions is a feature of macOS that lets you associate AppleScript scripts with folders. A Folder Action script is executed when the folder to which it is attached has items added or removed, or when its window is opened, closed, moved, or resized.</description>
    </item>
    
    <item>
      <title>网站支持一键向上 ｜ Hugo</title>
      <link>https://rxtee.com/posts/back_to_top/</link>
      <pubDate>Sun, 22 Mar 2020 13:07:39 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/back_to_top/</guid>
      <description>如果遇到长文章，网页会变得很长很长，当看到底部时，想快速返回到网页的顶端，单凭滚动鼠标滚轮，亦或者靠滑动妙控 板，似乎都是一件「苦差事」。一键向上👆变得尤为重要。
废话不多说了，show you my code.
配置 步骤一 创建 HTML 模板。
在 layouts/partials 文件夹下创建文章目录模板。
新建名如 back_to_top.html 的文件，文件内容为：
&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;back-to-top&amp;#34; style=&amp;#34;display: none;&amp;#34;&amp;gt; &amp;lt;i class=&amp;#34;fa fa-arrow-up&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/a&amp;gt; 默认隐藏，稍后再来控制它的显隐。
步骤二 创建样式。
在 static/css 文件夹下创建样式文件。
新建名如 back_to_top.css 的文件，文件内容为：
.back-to-top { position: fixed; bottom: 25px; right: 25px; background: rgba(0, 0, 0, 0.5); width: 50px; height: 50px; display: block; text-decoration: none; -webkit-border-radius: 35px; -moz-border-radius: 35px; border-radius: 35px; } .back-to-top i { color: #fff; margin: 0; position: relative; left: 15px; top: 14px; font-size: 22px; } .</description>
    </item>
    
    <item>
      <title>网站上支持平滑滚动 ｜ Hugo</title>
      <link>https://rxtee.com/posts/smoothscroll/</link>
      <pubDate>Sat, 21 Mar 2020 21:40:09 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/smoothscroll/</guid>
      <description>在上一篇（构建文章目录）设置了文章目录，但我发现在点击目录里的节点时，瞬间跳转到对应的文章位置，感觉有些生硬。
那么有没有一种方法可以让页面滚动更为顺滑呢？
经查阅，css 就支持这一特性，设置也非常简单。
html, body { scroll-behavior:smooth; } 没错，就是这么简单。我们需要做的只是在 static/css 文件夹内新建名为 smooth-scroll.css 的文件，将上述样式写入其中。并在 config.toml 配置文件夹中引用，即可。</description>
    </item>
    
    <item>
      <title>构建文章目录 ｜ Hugo</title>
      <link>https://rxtee.com/posts/toc_on_hugo/</link>
      <pubDate>Sat, 21 Mar 2020 21:05:43 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/toc_on_hugo/</guid>
      <description>总所周知，一本书拥有目录是一件非常重要的事情。不仅可以让人非常快速的了解到这本书所讲的内容，而且可以非常高效的查阅。而一篇文章也是如此。 查阅 Hugo 官方文档 后，发现它在支持这一特性，并且有两个例子可供我们参考。
配置 步骤一 在 config.toml 配置中新增如下配置。
[params] # Table of Contents toc = true wordCount = 0 其中 wordCount 为文章字数大于该值时才生成目录配置。
步骤二 创建 HTML 模板。
在 layouts/partials 文件夹下创建文章目录模板。
新建名如 toc.html 的文件，文件内容为：
{{ if and (gt .WordCount .Site.Params.wordCount ) (eq (.Site.Params.toc | default false) true) }} &amp;lt;aside class=&amp;#34;post-toc-absolute&amp;#34; id=&amp;#34;post-toc&amp;#34;&amp;gt; {{ .TableOfContents }} &amp;lt;/aside&amp;gt; {{ end }} 步骤三 配置显示位置。
打开页面模板，以我的主题为例为 single.html 文件。在合适的位置插入 {{ partial &amp;quot;toc.html&amp;quot; . }} 。以我的博客为例，我放在了文章正文所在 div 前，方便以后控制样式和位置。</description>
    </item>
    
    <item>
      <title>利用 Utterances 搭建评论系统 ｜ Hugo</title>
      <link>https://rxtee.com/posts/comments_system_on_hugo/</link>
      <pubDate>Sat, 21 Mar 2020 20:19:19 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/comments_system_on_hugo/</guid>
      <description>博客，不仅是一个记录我想法的地方，而且也是一个我和外界沟通的渠道，期望有人能在我的博文下与我互动，碰撞出新的火花，所以博文可以被评论势在必行。在寻求其他方式的时候，Utterances 不经意间进入了我的视野，它轻量，配置简单，且也可以利用 GitHub 来搭建，于是就它了。
安装 Utterances App 步骤一 首先，请确保已注册 Github。注册完毕之后或你已有账号请前往步骤二。
  步骤二 创建所需的仓库。
  由于我已经创建了 hugo-comment ，这里用 hugo-comments 做演示。你创建的时候取你喜欢的名字就好。
步骤三 在 GitHub 上安装 Utterances App。
进入 Utterances App 主页，点击安装。
  因为我已经安装过，所以这里是配置按钮。
  访问仓库选择刚刚创建的 hugo-comment ，点击安装（因为我已经安装过，所以这里是保存按钮）。
配置 步骤一 在 config.toml 配置中新增如下配置。
disable_comments = false [params.utteranc] repo = &amp;#34;{Github Name}/{Repo Name}&amp;#34; issueTerm = &amp;#34;title&amp;#34; # 设置每篇文章对应的 issue 的名字 theme = &amp;#34;github-dark&amp;#34; 其中 {Github Name} 为 GitHub 账户名（username），{Repo Name} 为刚刚创建的仓库名，如果没有配置对，评论框是显示不出来的。</description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>https://rxtee.com/posts/hello_hugo/</link>
      <pubDate>Fri, 20 Mar 2020 16:29:27 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/hello_hugo/</guid>
      <description>Hugo Hugo 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
安装 Mac/Linux 下推荐使用 brew 安装，如果你还没有安装 brew 请点击这里查看安装方法。
brew install hugo 执行成功后，再次执行以下指令，验证是否安装成功。
hugo version Windows 用户请参见官网链接进行安装。
基本使用 创建新站点 hugo new site blog 添加主题 cd blog git init git submodule add https://github.com/luizdepra/hugo-coder.git themes/hugo-coder 然后在 config.toml 配置文件中，添加 theme = &amp;ldquo;hugo-coder&amp;rdquo;
创建第一个博文 hugo new posts/my-first-post.md 执行完毕会在 content/posts 文件夹内得到名为 my-first-post.md 的文件。
打开该文件，其内容大概为：
+++ draft = true date = 2020-03-20T16:29:27+08:00 title = &amp;#34;&amp;#34; description = &amp;#34;&amp;#34; slug = &amp;#34;&amp;#34; tags = [] categories = [] externalLink = &amp;#34;&amp;#34; series = [] +++ 启动 Hugo 服务器 hugo server -D | EN +------------------+----+ Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 3 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Total in 11 ms Watching for changes in /Users/xxx/blog/{content,data,layouts,static,themes} Watching for config changes in /Users/xxx/blog/config.</description>
    </item>
    
    <item>
      <title>创建 GitHub Pages 仓库</title>
      <link>https://rxtee.com/posts/githubpages/</link>
      <pubDate>Fri, 20 Mar 2020 13:20:58 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/githubpages/</guid>
      <description>Github Pages GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。
如何使用 步骤一 首先，请确保已注册 Github。注册完毕之后或你已有账号请前往步骤二。
  步骤二 创建网站所需的仓库。
  其中仓库名需按照 xxxxx.github.io 格式来设置，其中 xxxxx 为你期望的名字。点击创建即可显示形如以下页面。
  步骤三 点击页面上的设置，找到 GitHub Pages 设置，在 Source 中选择 master branch 。如果 master branch 选项不可选，进先进行步骤四。如果可选即设置完成，并可以发现设置完成后页面上出现了一个可以访问的链接，该链接即为你的网站链接。
步骤四 在你本地的网站目录下执行以下指令，上传你的网站到所创建的仓库内。
git init git add -A git commit -m &amp;#34;first commit&amp;#34; git remote add origin https://github.com/XXXX/xxxxx.github.io.git git push -u origin master 因为 GitHub Pages 仅在仓库内有内容时，或者说仅在 master 分支存在时，才允许选择 master 作为 GitHub Pages 的 Source。</description>
    </item>
    
    <item>
      <title>Homebrew</title>
      <link>https://rxtee.com/posts/homebrew/</link>
      <pubDate>Fri, 20 Mar 2020 12:40:38 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/homebrew/</guid>
      <description>Homebrew. The Missing Package Manager for macOS (or Linux).
Install /bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;#34; Paste that in a macOS Terminal or Linux shell prompt.</description>
    </item>
    
  </channel>
</rss>