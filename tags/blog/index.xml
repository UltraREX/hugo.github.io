<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on mLogger</title>
    <link>https://rxtee.com/tags/blog/</link>
    <description>Recent content in Blog on mLogger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 05 Apr 2020 21:32:26 +0800</lastBuildDate>
    
	<atom:link href="https://rxtee.com/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>多图救星 —— 「懒加载」</title>
      <link>https://rxtee.com/posts/lazy_load_image/</link>
      <pubDate>Sun, 05 Apr 2020 21:32:26 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/lazy_load_image/</guid>
      <description>引言 总所周知，网页的加载速度主要取决于页面上图片的数量和大小。一张普通的图片往往就达几 M 甚至十几 M，当页面上图片很多的时候，加载完整个页面将是一件非常耗时的事情。况且，在一寸光阴一寸金的今天，时间意味生命，每增加 1s 的加载时间消耗，就会损失很多浏览者。
所以不仅要压缩网页上的图片，还需要在加载上拥有策略 —— 「懒加载」。浏览者不是一眼就可以浏览到网页上的所有图片的，所以当网页加载的时候只先加载浏览者目光所及之处的图片，在浏览者往下浏览的过程中，再加载即将出现在视野内的图片，这样不但可以加快整个网页的加载速度，还可给浏览者一个很好的体验。
lazysizes  lazysizes is a fast (jank-free), SEO-friendly and self-initializing lazyloader for images (including responsive images picture/srcset), iframes, scripts/widgets and much more. It also prioritizes resources by differentiating between crucial in view and near view elements to make perceived performance even faster.
It may become also your number one tool to integrate responsive images. It can automatically calculate the sizes attribute for your responsive images, it allows you to share media queries for your media attributes with your CSS, helping to separate layout (CSS) from content/structure (HTML) and it makes integrating responsive images into any environment really simple.</description>
    </item>
    
    <item>
      <title>网站支持一键向上</title>
      <link>https://rxtee.com/posts/back_to_top/</link>
      <pubDate>Sun, 22 Mar 2020 13:07:39 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/back_to_top/</guid>
      <description>如果遇到长文章，网页会变得很长很长，当看到底部时，想快速返回到网页的顶端，单凭滚动鼠标滚轮，亦或者靠滑动妙控 板，似乎都是一件「苦差事」。一键向上👆变得尤为重要。
废话不多说了，show you my code.
配置 步骤一 创建 HTML 模板。
在 layouts/partials 文件夹下创建文章目录模板。
新建名如 back_to_top.html 的文件，文件内容为：
&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;back-to-top&amp;#34; style=&amp;#34;display: none;&amp;#34;&amp;gt; &amp;lt;i class=&amp;#34;fa fa-arrow-up&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/a&amp;gt; 默认隐藏，稍后再来控制它的显隐。
步骤二 创建样式。
在 static/css 文件夹下创建样式文件。
新建名如 back_to_top.css 的文件，文件内容为：
.back-to-top { position: fixed; bottom: 25px; right: 25px; background: rgba(0, 0, 0, 0.5); width: 50px; height: 50px; display: block; text-decoration: none; -webkit-border-radius: 35px; -moz-border-radius: 35px; border-radius: 35px; } .back-to-top i { color: #fff; margin: 0; position: relative; left: 15px; top: 14px; font-size: 22px; } .</description>
    </item>
    
    <item>
      <title>网站上支持平滑滚动</title>
      <link>https://rxtee.com/posts/smoothscroll/</link>
      <pubDate>Sat, 21 Mar 2020 21:40:09 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/smoothscroll/</guid>
      <description>在上一篇（构建文章目录）设置了文章目录，但我发现在点击目录里的节点时，瞬间跳转到对应的文章位置，感觉有些生硬。
那么有没有一种方法可以让页面滚动更为顺滑呢？
经查阅，css 就支持这一特性，设置也非常简单。
html, body { scroll-behavior:smooth; } 没错，就是这么简单。我们需要做的只是在 static/css 文件夹内新建名为 smooth-scroll.css 的文件，将上述样式写入其中。并在 config.toml 配置文件夹中引用，即可。</description>
    </item>
    
    <item>
      <title>构建文章目录</title>
      <link>https://rxtee.com/posts/toc_on_hugo/</link>
      <pubDate>Sat, 21 Mar 2020 21:05:43 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/toc_on_hugo/</guid>
      <description>总所周知，一本书拥有目录是一件非常重要的事情。不仅可以让人非常快速的了解到这本书所讲的内容，而且可以非常高效的查阅。而一篇文章也是如此。 查阅 Hugo 官方文档 后，发现它在支持这一特性，并且有两个例子可供我们参考。
配置 步骤一 在 config.toml 配置中新增如下配置。
[params] # Table of Contents toc = true wordCount = 0 其中 wordCount 为文章字数大于该值时才生成目录配置。
步骤二 创建 HTML 模板。
在 layouts/partials 文件夹下创建文章目录模板。
新建名如 toc.html 的文件，文件内容为：
{{ if and (gt .WordCount .Site.Params.wordCount ) (eq (.Site.Params.toc | default false) true) }} &amp;lt;aside class=&amp;#34;post-toc-absolute&amp;#34; id=&amp;#34;post-toc&amp;#34;&amp;gt; {{ .TableOfContents }} &amp;lt;/aside&amp;gt; {{ end }} 步骤三 配置显示位置。
打开页面模板，以我的主题为例为 single.html 文件。在合适的位置插入 {{ partial &amp;quot;toc.html&amp;quot; . }} 。以我的博客为例，我放在了文章正文所在 div 前，方便以后控制样式和位置。</description>
    </item>
    
    <item>
      <title>利用 Utterances 搭建评论系统</title>
      <link>https://rxtee.com/posts/comments_system_on_hugo/</link>
      <pubDate>Sat, 21 Mar 2020 20:19:19 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/comments_system_on_hugo/</guid>
      <description>博客，不仅是一个记录我想法的地方，而且也是一个我和外界沟通的渠道，期望有人能在我的博文下与我互动，碰撞出新的火花，所以博文可以被评论势在必行。在寻求其他方式的时候，Utterances 不经意间进入了我的视野，它轻量，配置简单，且也可以利用 GitHub 来搭建，于是就它了。
安装 Utterances App 步骤一 首先，请确保已注册 Github。注册完毕之后或你已有账号请前往步骤二。
  步骤二 创建所需的仓库。
  由于我已经创建了 hugo-comment ，这里用 hugo-comments 做演示。你创建的时候取你喜欢的名字就好。
步骤三 在 GitHub 上安装 Utterances App。
进入 Utterances App 主页，点击安装。
  因为我已经安装过，所以这里是配置按钮。
  访问仓库选择刚刚创建的 hugo-comment ，点击安装（因为我已经安装过，所以这里是保存按钮）。
配置 步骤一 在 config.toml 配置中新增如下配置。
disable_comments = false [params.utteranc] repo = &amp;#34;{Github Name}/{Repo Name}&amp;#34; issueTerm = &amp;#34;title&amp;#34; # 设置每篇文章对应的 issue 的名字 theme = &amp;#34;github-dark&amp;#34; 其中 {Github Name} 为 GitHub 账户名（username），{Repo Name} 为刚刚创建的仓库名，如果没有配置对，评论框是显示不出来的。</description>
    </item>
    
    <item>
      <title>Hello Hugo</title>
      <link>https://rxtee.com/posts/hello_hugo/</link>
      <pubDate>Fri, 20 Mar 2020 16:29:27 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/hello_hugo/</guid>
      <description>Hugo Hugo 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
安装 Mac/Linux 下推荐使用 brew 安装，如果你还没有安装 brew 请点击这里查看安装方法。
brew install hugo 执行成功后，再次执行以下指令，验证是否安装成功。
hugo version Windows 用户请参见官网链接进行安装。
基本使用 创建新站点 hugo new site blog 添加主题 cd blog git init git submodule add https://github.com/luizdepra/hugo-coder.git themes/hugo-coder 然后在 config.toml 配置文件中，添加 theme = &amp;ldquo;hugo-coder&amp;rdquo;
创建第一个博文 hugo new posts/my-first-post.md 执行完毕会在 content/posts 文件夹内得到名为 my-first-post.md 的文件。
打开该文件，其内容大概为：
+++ draft = true date = 2020-03-20T16:29:27+08:00 title = &amp;#34;&amp;#34; description = &amp;#34;&amp;#34; slug = &amp;#34;&amp;#34; tags = [] categories = [] externalLink = &amp;#34;&amp;#34; series = [] +++ 启动 Hugo 服务器 hugo server -D | EN +------------------+----+ Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 3 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Total in 11 ms Watching for changes in /Users/xxx/blog/{content,data,layouts,static,themes} Watching for config changes in /Users/xxx/blog/config.</description>
    </item>
    
    <item>
      <title>创建 GitHub Pages 仓库</title>
      <link>https://rxtee.com/posts/githubpages/</link>
      <pubDate>Fri, 20 Mar 2020 13:20:58 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/githubpages/</guid>
      <description>Github Pages GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。
如何使用 步骤一 首先，请确保已注册 Github。注册完毕之后或你已有账号请前往步骤二。
  步骤二 创建网站所需的仓库。
  其中仓库名需按照 xxxxx.github.io 格式来设置，其中 xxxxx 为你期望的名字。点击创建即可显示形如以下页面。
  步骤三 点击页面上的设置，找到 GitHub Pages 设置，在 Source 中选择 master branch 。如果 master branch 选项不可选，进先进行步骤四。如果可选即设置完成，并可以发现设置完成后页面上出现了一个可以访问的链接，该链接即为你的网站链接。
步骤四 在你本地的网站目录下执行以下指令，上传你的网站到所创建的仓库内。
git init git add -A git commit -m &amp;#34;first commit&amp;#34; git remote add origin https://github.com/XXXX/xxxxx.github.io.git git push -u origin master 因为 GitHub Pages 仅在仓库内有内容时，或者说仅在 master 分支存在时，才允许选择 master 作为 GitHub Pages 的 Source。</description>
    </item>
    
  </channel>
</rss>