<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on mLogger</title>
    <link>https://rxtee.com/tags/blog/</link>
    <description>Recent content in Blog on mLogger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 20 Mar 2020 16:29:27 +0800</lastBuildDate>
    
	<atom:link href="https://rxtee.com/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello Hugo</title>
      <link>https://rxtee.com/posts/hello_hugo/</link>
      <pubDate>Fri, 20 Mar 2020 16:29:27 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/hello_hugo/</guid>
      <description>Hugo Hugo 是由 Go 语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
安装 Mac/Linux 下推荐使用 brew 安装，如果你还没有安装 brew 请点击这里查看安装方法。
brew install hugo 执行成功后，再次执行以下指令，验证是否安装成功。
hugo version Windows 用户请参见官网链接进行安装。
基本使用 创建新站点 hugo new site blog 添加主题 cd blog git init git submodule add https://github.com/luizdepra/hugo-coder.git themes/hugo-coder 然后在 config.toml 配置文件中，添加 theme = &amp;ldquo;hugo-coder&amp;rdquo;
创建第一个博文 hugo new posts/my-first-post.md 执行完毕会在 content/posts 文件夹内得到名为 my-first-post.md 的文件。
打开该文件，其内容大概为：
+++ draft = true date = 2020-03-20T16:29:27+08:00 title = &amp;#34;&amp;#34; description = &amp;#34;&amp;#34; slug = &amp;#34;&amp;#34; tags = [] categories = [] externalLink = &amp;#34;&amp;#34; series = [] +++ 启动 Hugo 服务器 hugo server -D | EN +------------------+----+ Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 3 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Total in 11 ms Watching for changes in /Users/xxx/blog/{content,data,layouts,static,themes} Watching for config changes in /Users/xxx/blog/config.</description>
    </item>
    
    <item>
      <title>创建 GitHub Pages 仓库</title>
      <link>https://rxtee.com/posts/githubpages/</link>
      <pubDate>Fri, 20 Mar 2020 13:20:58 +0800</pubDate>
      
      <guid>https://rxtee.com/posts/githubpages/</guid>
      <description>Github Pages GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。
如何使用 步骤一：首先，请确保已注册 Github。注册完毕之后或你已有账号请前往步骤二。
步骤二：创建网站所需的仓库。
其中仓库名需按照 xxxxx.github.io 格式来设置，其中 xxxxx 为你期望的名字。点击创建即可显示形如以下页面。
步骤三：点击页面上的设置，找到 GitHub Pages 设置，在 Source 中选择 master branch 。如果 master branch 选项不可选，进先进行步骤四。如果可选即设置完成，并可以发现设置完成后页面上出现了一个可以访问的链接，该链接即为你的网站链接。
步骤四：在你本地的网站目录下执行以下指令，上传你的网站到所创建的仓库内。
git init git add -A git commit -m &amp;#34;first commit&amp;#34; git remote add origin https://github.com/XXXX/xxxxx.github.io.git git push -u origin master 因为 GitHub Pages 仅在仓库内有内容时，或者说仅在 master 分支存在时，才允许选择 master 作为 GitHub Pages 的 Source。
一切准备就绪，打开你的网站看看吧。</description>
    </item>
    
  </channel>
</rss>